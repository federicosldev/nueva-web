---
interface Props {
    title: string;
}

const { title } = Astro.props;
---

<section
    class="physics-section bg-lightpurple-pattern flex flex-col items-center justify-center text-center pt-16 md:pt-[100px] lg:pt-[160px] pb-20 md:pb-[200px] lg:pb-[200px] relative overflow-hidden"
>
    <div
        class="content relative z-10 w-full max-w-[1140px] px-4 pointer-events-none"
    >
        <h2
            class="text-6xl md:text-5xl lg:text-7xl xl:text-9xl text-primary-purple uppercase"
        >
            Una vez que tenemos claros tus objetivos,
        </h2>
        <p
            class="text-2xl md:text-2xl lg:text-4xl xl:text-5xl text-primary-purple uppercase font-bold mt-6"
        >
            Podemos desarrollar una estrategia y un plan para alcanzarlos. Esto
            incluirá la identificación de los pasos necesarios, los recursos y
            los posibles obstáculos a superar.
        </p>
    </div>
    <div class="physics-container absolute z-0 hidden lg:block lg:mt-[100px]">
    </div>
</section>

<script>
    import Matter from 'matter-js';

    function initPhysics() {
        if (window.innerWidth < 1024) return;

        const Engine = Matter.Engine;
        const Render = Matter.Render;
        const World = Matter.World;
        const Bodies = Matter.Bodies;
        const Mouse = Matter.Mouse;
        const MouseConstraint = Matter.MouseConstraint;
        const Runner = Matter.Runner;

        let isRunning = false;
        let bodies = [];
        let engine = null;
        let render = null;
        let runner = null;

        const container = document.querySelector('.physics-container');
        const content = document.querySelector('.content');
        if (!container || !content) return;

        const updateContainerDimensions = () => {
            const section = container.closest('.physics-section');
            if (!section) return null;

            const contentRect = content.getBoundingClientRect();
            const sectionRect = section.getBoundingClientRect();
            const contentBottom = contentRect.bottom - sectionRect.top;
            const availableHeight = Math.max(
                300,
                sectionRect.height - contentBottom - 100,
            );

            container.style.top = `${contentBottom}px`;
            container.style.height = `${availableHeight}px`;

            return {
                width: section.clientWidth,
                height: availableHeight,
                contentBottom,
            };
        };

        const dimensions = updateContainerDimensions();
        if (!dimensions) return;

        engine = Engine.create({
            gravity: { x: 0, y: 1, scale: 0.0015 },
        });

        render = Render.create({
            element: container,
            engine: engine,
            options: {
                width: dimensions.width,
                height: dimensions.height,
                wireframes: false,
                background: 'transparent',
                pixelRatio: 1,
            },
        });

        // Make the canvas interactive
        render.canvas.style.pointerEvents = 'auto';

        runner = Runner.create();

        const itemsBase = [
            { type: 'text', content: 'DESIGN', baseWidth: 150 },
            { type: 'text', content: 'USER EXPERIENCE', baseWidth: 220 },
            { type: 'text', content: 'INSPIRATION', baseWidth: 190 },
            { type: 'text', content: 'E-COMMERCE', baseWidth: 180 },
            { type: 'text', content: 'REACTJS', baseWidth: 160 },
            { type: 'text', content: 'WEB DESIGN', baseWidth: 190 },
            { type: 'text', content: 'BRAND', baseWidth: 140 },
            { type: 'text', content: 'USER INTERFACE', baseWidth: 210 },
            { type: 'text', content: 'PROTOTYPING', baseWidth: 190 },
            { type: 'text', content: 'TECHNOLOGY', baseWidth: 180 },
        ];

        function createPillCanvas(width, height, text, fontSize = 20) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const scale = 1;

            canvas.width = width * scale;
            canvas.height = height * scale;
            ctx.scale(scale, scale);

            ctx.fillStyle = '#1d1d1d';
            const radius = height / 2;
            ctx.beginPath();
            ctx.moveTo(radius, 0);
            ctx.lineTo(width - radius, 0);
            ctx.arcTo(width, 0, width, radius, radius);
            ctx.arcTo(width, height, width - radius, height, radius);
            ctx.lineTo(radius, height);
            ctx.arcTo(0, height, 0, height - radius, radius);
            ctx.arcTo(0, 0, radius, 0, radius);
            ctx.closePath();
            ctx.fill();

            ctx.fillStyle = '#fff';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.font = `bold ${fontSize}px "Darker Grotesque", sans-serif`;
            ctx.fillText(text, width / 2, height / 2);

            return canvas;
        }

        function createBodies() {
            const scale =
                window.innerWidth >= 1536
                    ? 1
                    : window.innerWidth >= 1280
                      ? 0.85
                      : 0.7;

            return itemsBase.map((item, index) => {
                const width = Math.round(item.baseWidth * scale);
                const height = Math.round(45 * scale);
                const fontSize = Math.round(24 * scale);

                const canvas = createPillCanvas(
                    width,
                    height,
                    item.content,
                    fontSize,
                );

                const spacing = dimensions.width / (itemsBase.length + 1);
                const yOffset = -100 - Math.random() * 200;

                return Bodies.rectangle(
                    spacing * (index + 1),
                    yOffset,
                    width,
                    height,
                    {
                        friction: 0.3,
                        restitution: 0.6,
                        density: 0.001,
                        chamfer: { radius: 10 },
                        render: {
                            sprite: {
                                texture: canvas.toDataURL(),
                            },
                        },
                    },
                );
            });
        }

        const walls = [
            Bodies.rectangle(
                dimensions.width / 2,
                dimensions.height + 50,
                dimensions.width + 100,
                100,
                {
                    isStatic: true,
                    friction: 0.3,
                    render: { fillStyle: 'transparent' },
                },
            ),
            Bodies.rectangle(
                -50,
                dimensions.height / 2,
                100,
                dimensions.height,
                {
                    isStatic: true,
                    friction: 0.3,
                    render: { fillStyle: 'transparent' },
                },
            ),
            Bodies.rectangle(
                dimensions.width + 50,
                dimensions.height / 2,
                100,
                dimensions.height,
                {
                    isStatic: true,
                    friction: 0.3,
                    render: { fillStyle: 'transparent' },
                },
            ),
        ];

        World.add(engine.world, walls);

        const mouse = Mouse.create(render.canvas);
        const mouseConstraint = MouseConstraint.create(engine, {
            mouse: mouse,
            constraint: {
                stiffness: 0.2,
                render: { visible: false },
            },
        });

        render.mouse = mouse;

        Render.run(render);

        const observer = new IntersectionObserver(
            entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && !isRunning) {
                        setTimeout(() => {
                            bodies = createBodies();
                            World.add(engine.world, [
                                ...bodies,
                                mouseConstraint,
                            ]);
                            Runner.run(runner, engine);
                            isRunning = true;
                        }, 500);
                    }
                });
            },
            { threshold: 0.1 },
        );

        const physicsSection = document.querySelector('.physics-section');
        if (physicsSection) {
            observer.observe(physicsSection);
        }

        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                if (window.innerWidth < 1024) {
                    if (isRunning) {
                        Runner.stop(runner);
                        Render.stop(render);
                        World.clear(engine.world, true);
                        render.canvas.remove();
                        isRunning = false;
                    }
                    return;
                }

                const newDimensions = updateContainerDimensions();
                if (!newDimensions) return;

                render.canvas.width = newDimensions.width;
                render.canvas.height = newDimensions.height;
                render.options.width = newDimensions.width;
                render.options.height = newDimensions.height;

                Matter.Body.setPosition(walls[0], {
                    x: newDimensions.width / 2,
                    y: newDimensions.height + 50,
                });
                Matter.Body.setPosition(walls[2], {
                    x: newDimensions.width + 50,
                    y: newDimensions.height / 2,
                });

                World.clear(engine.world, false);
                World.add(engine.world, [...walls, mouseConstraint]);
                bodies = createBodies();
                World.add(engine.world, bodies);
            }, 250);
        });

        return () => {
            if (isRunning) {
                Runner.stop(runner);
                Render.stop(render);
                World.clear(engine.world, true);
                render.canvas.remove();
            }
            observer.disconnect();
        };
    }

    document.addEventListener('astro:page-load', () => {
        const physicsSection = document.querySelector('.physics-section');
        if (physicsSection) {
            const observer = new IntersectionObserver(
                entries => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            initPhysics();
                            observer.disconnect();
                        }
                    });
                },
                { threshold: 0.1 },
            );

            observer.observe(physicsSection);
        }
    });
</script>

<style>
    .physics-section {
        height: 91vh;
        position: relative;
        overflow: hidden;
    }

    .physics-container {
        width: 100%;
        position: absolute;
        inset: 0;
    }

    .physics-container canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100% !important;
        height: 100% !important;
    }

    .content {
        position: relative;
        z-index: 10;
        text-align: center;
        margin: 0 auto;
        max-width: 1140px;
    }

    @media (max-width: 1023px) {
        .physics-section {
            height: auto;
        }
    }
</style>
